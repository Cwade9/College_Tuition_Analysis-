cols.num <- c("UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
data16[cols.num] <- sapply(data16[cols.num],as.numeric)
sapply(data16, class)
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
#Slice out first 6 columns
data16 <- data16[7:12]
data16 <- scale(data16[2:6])
View(data16)
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
data16 <- select(dat, "UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
#loop through every column and transform into numeric values
cols.num <- c("UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
data16[cols.num] <- sapply(data16[cols.num],as.numeric)
sapply(data16, class)
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
#Slice out first 6 columns
data16 <- data16[7:12]
data16 <- scale(data16[2:6])
View(data16)
#Combine similar columns to consense the dataset down
dat <- dat %>%
mutate(NPT_COM = coalesce(NPT4_PUB.y, NPT4_PRIV.y))%>%
mutate(NUM_COM = coalesce(NUM4_PUB.y, NUM4_PRIV.y))
data16 <- select(dat, "UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
#loop through every column and transform into numeric values
cols.num <- c("UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
data16[cols.num] <- sapply(data16[cols.num],as.numeric)
sapply(data16, class)
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
#Slice out first 6 columns
data16 <- data16[7:12]
#Opitmal number of cluster
fviz_nbclust(data16, kmeans,
method =  "gap_stat")
Clarax <- clara(data16,3)
fviz_cluster(Clarax, stand = FALSE, geom = "point" , ellipse = F)
Clarax[["clustering"]][["199306"]]          #Pfeiffer Cluster 4
#Clarax[["clustering"]][["199306"]]          #Pfeiffer Cluster 4
#Clarax[["clustering"]][["201548"]]          #Capital Cluster 1
Clarax
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
View(Clarax)
#Clarax[["clustering"]][["199306"]]          #Pfeiffer Cluster 4
#Clarax[["clustering"]][["201548"]]          #Capital Cluster 1
Clarax$medoids(UNITED.yimputed)
Clarax$medoids[UNITED.yimputed]
Clarax$medoids
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
UNITID.yimputed
View(Clarax)
Clarax[["medoids"]]
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
Clarax[["medoids"]][1990]
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
Clarax[["medoids"]][199306]
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
View(Clarax)
Clarax
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
Clarax["data"]
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
View(Clarax)
Clarax[["clustering"]][["199306"]]
Clarax[["clustering"]][["UNITID.yimputed"]]
View(Clarax)
View(Clarax)
#Change ID into row
data16 <- column_to_rownames(data16$UNITID.yimputed)
#Combine similar columns to consense the dataset down
dat <- dat %>%
mutate(NPT_COM = coalesce(NPT4_PUB.y, NPT4_PRIV.y))%>%
mutate(NUM_COM = coalesce(NUM4_PUB.y, NUM4_PRIV.y))
data16 <- select(dat, "UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
#loop through every column and transform into numeric values
cols.num <- c("UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
data16[cols.num] <- sapply(data16[cols.num],as.numeric)
sapply(data16, class)
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
#Slice out first 6 columns
data16 <- data16[7:12]
#Change ID into row
data16 <- column_to_rownames(data16$UNITID.yimputed)
#Change ID into row
data16 <- column_to_rownames(data16, UNITID.yimputed)
#Change ID into row
data16 <- column_to_rownames(data16, "UNITID.yimputed")
data16 <- scale(data16)
Clarax <- clara(data16,7)
fviz_cluster(Clarax, stand = FALSE, geom = "point" , ellipse = F)
Clarax[["clustering"]][["UNITID.yimputed"]]
Clarax
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
View(Clarax)
Clarax[["clustering"]][["199306"]]
Clarax[["clustering"]][["201548"]]
Clarax
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
data_cluster <- Clarax$clustering
data1 = as.data.frame(data16[data_cluster ==6,])
filter(data1, row_number()==199306)
data_cluster <- Clarax$clustering
data1 = as.data.frame(data16[data_cluster ==6,])
rowid_to_column(data1)
data_cluster <- Clarax$clustering
data1 = as.data.frame(data16[data_cluster ==6,])
rownames_to_column(data1)
data_cluster <- Clarax$clustering
data1 = as.data.frame(data16[data_cluster ==6,])
data1=rownames_to_column(data1)
cor(data1)
#Searching for corrolation bewtween the data. I want to check for pairwise correlation bewtween two more var
pairs(data1, c(2,5))
View(data16)
View(data1)
data_cluster <- Clarax$clustering
data1 = as.data.frame(data16[data_cluster ==6,])
#data1=rownames_to_column(data1)
#Change ID into row
data16 <- column_to_rownames(data16, "UNITID.yimputed")
#Filter all of the dataset at OPEFLAG to drop none IV schools
#Drop all duplicated rows by school name
dat<- dat %>%
filter( OPEFLAG.x == 1) %>%
distinct(INSTNM, .keep_all = TRUE)
#Combine similar columns to consense the dataset down
dat <- dat %>%
mutate(NPT_COM = coalesce(NPT4_PUB.y, NPT4_PRIV.y))%>%
mutate(NUM_COM = coalesce(NUM4_PUB.y, NUM4_PRIV.y))
data16 <- select(dat, "UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
#Slice out first 6 columns
data16 <- data16[7:12]
#Change ID into row
data16 <- column_to_rownames(data16, "UNITID.yimputed")
data16 <- scale(data16)
View(data16)
#Combine similar columns to consense the dataset down
dat <- dat %>%
mutate(NPT_COM = coalesce(NPT4_PUB.y, NPT4_PRIV.y))%>%
mutate(NUM_COM = coalesce(NUM4_PUB.y, NUM4_PRIV.y))
#Filter all of the dataset at OPEFLAG to drop none IV schools
#Drop all duplicated rows by school name
dat<- dat %>%
filter( OPEFLAG.x == 1) %>%
distinct(INSTNM, .keep_all = TRUE)
#Combine similar columns to consense the dataset down
dat <- dat %>%
mutate(NPT_COM = coalesce(NPT4_PUB.y, NPT4_PRIV.y))%>%
mutate(NUM_COM = coalesce(NUM4_PUB.y, NUM4_PRIV.y))
data16 <- select(dat, "UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
#loop through every column and transform into numeric values
cols.num <- c("UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
data16[cols.num] <- sapply(data16[cols.num],as.numeric)
sapply(data16, class)
#Create function to impute missing values
impute <- function(x){
na <- is.na(x)
n.missing <- sum(na)
a.obs <- x[!na]
imputed <- x
imputed[na] <- sample(a.obs, n.missing, replace = TRUE)
return(imputed)
}
random.impute.data.frame <- function(data16, cols){
nms <-names(data16)
for(col in cols){
name <- paste(nms[col],"imputed", sep = "")
data16[name] <- impute(data16[,col])
}
data16
}
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
#Slice out first 6 columns
data16 <- data16[7:12]
#Change ID into row
data16 <- column_to_rownames(data16, "UNITID.yimputed")
data16 <- scale(data16)
Clarax <- clara(data16,7)
fviz_cluster(Clarax, stand = FALSE, geom = "point" , ellipse = F)
Clarax[["clustering"]][["199306"]]
Clarax[["clustering"]][["201548"]]
Clarax
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
data_cluster <- Clarax$clustering
data1 = as.data.frame(data16[data_cluster ==4,])
#data1=rownames_to_column(data1)
cor(data1)
#Searching for corrolation bewtween the data. I want to check for pairwise correlation bewtween two more var
pairs(data1)
#making the process repetable
#spliting the data into training & testing
set.seed(1234)
ind <- sample(2, nrow(data1), replace =TRUE, prob = c(0.7, 0.3))
training <- data1[ind==1,]
testing <- data1[ind==2,]
head(training)
head(testing)
head(testing)
cbind(summary(training$COSTT4_A.yimputed) , summary(testing$UGDS.yimputed))
#mltiple Linear Regression
#Compute the model and make UGDS a dependent and COSTT as the independent var
#the residuals are whats subtracted and left from the independt var, they have no correlation with dependent var
model <- lm(NUM_COMimputed~COSTT4_A.yimputed + TUITFTE.yimputed + NPT_COMimputed, data=training )
model
#Model Diagnostics
summary(model)
#Plot to see if the has corr
plot(NUM_COMimputed~COSTT4_A.yimputed + TUITFTE.yimputed + NPT_COMimputed, data=training )
abline(model,col ="blue")
plot(model)
#Prediction
pred <- predict(model, testing)
head(pred)
head(testing)
model[["fitted.values"]][["201548"]]
predict(model[["fitted.values"]][["201548"]])
capital <- model[["fitted.values"]][["201548"]]
capital <- model[["fitted.values"]][["201548"]]
capital
(data1$COSTT4_A.yimputed * .7)
data1 <- (data1$COSTT4_A.yimputed * .7)
data_cluster <- Clarax$clustering
data1 = as.data.frame(data16[data_cluster ==4,])
#data1=rownames_to_column(data1)
data1$COSTT4_A.yimputed <- (data1$COSTT4_A.yimputed * .7)
View(data16)
View(data16)
predict(model, data.frame(COSTT4_A.yimputed=10))
#Prediction
pred <- predict(model, testing)
head(pred)
head(testing)
predict(model, data.frame(COSTT4_A.yimputed=10))
predict(model, data.frame(COSTT4_A.yimputed=3))
data_cluster <- Clarax$clustering
data1 = as.data.frame(data16[data_cluster ==4,])
#data1=rownames_to_column(data1)
cor(data1)
#Searching for corrolation bewtween the data. I want to check for pairwise correlation bewtween two more var
pairs(data1)
#making the process repetable
#spliting the data into training & testing
set.seed(1234)
ind <- sample(2, nrow(data1), replace =TRUE, prob = c(0.7, 0.3))
training <- data1[ind==1,]
testing <- data1[ind==2,]
head(training)
head(testing)
cbind(summary(training$COSTT4_A.yimputed) , summary(testing$UGDS.yimputed))
#mltiple Linear Regression
#Compute the model and make UGDS a dependent and COSTT as the independent var
#the residuals are whats subtracted and left from the independt var, they have no correlation with dependent var
model <- lm(NUM_COMimputed~COSTT4_A.yimputed + TUITFTE.yimputed + NPT_COMimputed, data=training )
model
#Model Diagnostics
summary(model)
#Plot to see if the has corr
plot(NUM_COMimputed~COSTT4_A.yimputed + TUITFTE.yimputed + NPT_COMimputed, data=training )
abline(model,col ="blue")
plot(model)
#Prediction
pred <- predict(model, testing)
head(pred)
head(testing)
capital <- model[["fitted.values"]][["201548"]]
capital
predict(model, data.frame(COSTT4_A.yimputed=3))
dat <- merge(MERGED2017_18_PP,MERGED2016_17_PP, by="INSTNM")
dat <- select(dat ,UNITID.x,INSTNM,OPEFLAG.x,UNITID.y, COSTT4_A.y,UGDS.y , NUM4_PUB.y , NUM4_PRIV.y , TUITFTE.y , NPT4_PUB.y , NPT4_PRIV.y )
#View first 6 rows of dat
head(dat)
#View summary of the datatypes
glimpse(dat)
#View summary of data
summary(dat)
#Filter all of the dataset at OPEFLAG to drop none IV schools
#Drop all duplicated rows by school name
dat<- dat %>%
filter( OPEFLAG.x == 1) %>%
distinct(INSTNM, .keep_all = TRUE)
#Combine similar columns to consense the dataset down
dat <- dat %>%
mutate(NPT_COM = coalesce(NPT4_PUB.y, NPT4_PRIV.y))%>%
mutate(NUM_COM = coalesce(NUM4_PUB.y, NUM4_PRIV.y))
data16 <- select(dat, "UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
#loop through every column and transform into numeric values
cols.num <- c("UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
data16[cols.num] <- sapply(data16[cols.num],as.numeric)
sapply(data16, class)
#Create function to impute missing values
impute <- function(x){
na <- is.na(x)
n.missing <- sum(na)
a.obs <- x[!na]
imputed <- x
imputed[na] <- sample(a.obs, n.missing, replace = TRUE)
return(imputed)
}
random.impute.data.frame <- function(data16, cols){
nms <-names(data16)
for(col in cols){
name <- paste(nms[col],"imputed", sep = "")
data16[name] <- impute(data16[,col])
}
data16
}
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
#Slice out first 6 columns
data16 <- data16[7:12]
#Change ID into row
data16 <- column_to_rownames(data16, "UNITID.yimputed")
data16 <- scale(data16)
#Opitmal number of cluster
fviz_nbclust(data16, kmeans,
method =  "gap_stat")
data$COSTT4_a.yimputed <- (data1$COSTT4_A.yimputed * .7)
data$COSTT4_A.yimputed <- (data1$COSTT4_A.yimputed * .7)
data1$COSTT4_A.yimputed <- (data1$COSTT4_A.yimputed * .7)
View(data1)
View(data1)
data1$COSTT4_A.yimputed <- (data1$COSTT4_A.yimputed * .7)
summary(data1)
dat <- merge(MERGED2017_18_PP,MERGED2016_17_PP, by="INSTNM")
dat <- select(dat ,UNITID.x,INSTNM,OPEFLAG.x,UNITID.y, COSTT4_A.y,UGDS.y , NUM4_PUB.y , NUM4_PRIV.y , TUITFTE.y , NPT4_PUB.y , NPT4_PRIV.y )
#View first 6 rows of dat
head(dat)
#View summary of the datatypes
glimpse(dat)
#View summary of the datatypes
glimpse(dat)
#View summary of data
summary(dat)
#Filter all of the dataset at OPEFLAG to drop none IV schools
#Drop all duplicated rows by school name
dat<- dat %>%
filter( OPEFLAG.x == 1) %>%
distinct(INSTNM, .keep_all = TRUE)
#Combine similar columns to consense the dataset down
dat <- dat %>%
mutate(NPT_COM = coalesce(NPT4_PUB.y, NPT4_PRIV.y))%>%
mutate(NUM_COM = coalesce(NUM4_PUB.y, NUM4_PRIV.y))
data16 <- select(dat, "UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
#loop through every column and transform into numeric values
cols.num <- c("UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
data16[cols.num] <- sapply(data16[cols.num],as.numeric)
sapply(data16, class)
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
#Slice out first 6 columns
data16 <- data16[7:12]
#Change ID into row
data16 <- column_to_rownames(data16, "UNITID.yimputed")
data16 <- scale(data16)
#Opitmal number of cluster
fviz_nbclust(data16, kmeans,
method =  "gap_stat")
Clarax <- clara(data16,7)
fviz_cluster(Clarax, stand = FALSE, geom = "point" , ellipse = F)
Clarax[["clustering"]][["199306"]]
Clarax[["clustering"]][["201548"]]
Clarax
#data17.r <- as.data.frame(data17.r)
#groups %>% inner_join(data17.r)
#cor(data1)
summary(data1)
data1$COSTT4_A.yimputed <- (data1$COSTT4_A.yimputed * .7)
summary(data1)
dat <- merge(MERGED2017_18_PP,MERGED2016_17_PP, by="INSTNM")
dat <- select(dat ,UNITID.x,INSTNM,OPEFLAG.x,UNITID.y, COSTT4_A.y,UGDS.y , NUM4_PUB.y , NUM4_PRIV.y , TUITFTE.y , NPT4_PUB.y , NPT4_PRIV.y )
#View first 6 rows of dat
head(dat)
#View summary of the datatypes
glimpse(dat)
#View summary of data
summary(dat)
#Filter all of the dataset at OPEFLAG to drop none IV schools
#Drop all duplicated rows by school name
dat<- dat %>%
filter( OPEFLAG.x == 1) %>%
distinct(INSTNM, .keep_all = TRUE)
#Combine similar columns to consense the dataset down
dat <- dat %>%
mutate(NPT_COM = coalesce(NPT4_PUB.y, NPT4_PRIV.y))%>%
mutate(NUM_COM = coalesce(NUM4_PUB.y, NUM4_PRIV.y))
data16 <- select(dat, "UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
#loop through every column and transform into numeric values
cols.num <- c("UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
data16[cols.num] <- sapply(data16[cols.num],as.numeric)
sapply(data16, class)
#Create function to impute missing values
impute <- function(x){
na <- is.na(x)
n.missing <- sum(na)
a.obs <- x[!na]
imputed <- x
imputed[na] <- sample(a.obs, n.missing, replace = TRUE)
return(imputed)
}
random.impute.data.frame <- function(data16, cols){
nms <-names(data16)
for(col in cols){
name <- paste(nms[col],"imputed", sep = "")
data16[name] <- impute(data16[,col])
}
data16
}
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
#Slice out first 6 columns
data16 <- data16[7:12]
#Change ID into row
data16 <- column_to_rownames(data16, "UNITID.yimputed")
data16 <- scale(data16)
#Opitmal number of cluster
fviz_nbclust(data16, kmeans,
method =  "gap_stat")
set.seed(1234)
ind <- sample(2, nrow(data1), replace =TRUE, prob = c(0.7, 0.3))
training <- data1[ind==1,]
testing <- data1[ind==2,]
model <- lm(NUM_COMimputed~COSTT4_A.yimputed + NPT_COMimputed, data=training )
model
dat <- merge(MERGED2017_18_PP,MERGED2016_17_PP, by="INSTNM")
dat <- select(dat ,UNITID.x,INSTNM,OPEFLAG.x,UNITID.y, COSTT4_A.y,UGDS.y , NUM4_PUB.y , NUM4_PRIV.y , TUITFTE.y , NPT4_PUB.y , NPT4_PRIV.y )
#View first 6 rows of dat
head(dat)
#View summary of the datatypes
glimpse(dat)
#View summary of data
summary(dat)
#Filter all of the dataset at OPEFLAG to drop none IV schools
#Drop all duplicated rows by school name
dat<- dat %>%
filter( OPEFLAG.x == 1) %>%
distinct(INSTNM, .keep_all = TRUE)
#Combine similar columns to consense the dataset down
dat <- dat %>%
mutate(NPT_COM = coalesce(NPT4_PUB.y, NPT4_PRIV.y))%>%
mutate(NUM_COM = coalesce(NUM4_PUB.y, NUM4_PRIV.y))
data16 <- select(dat, "UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
#loop through every column and transform into numeric values
cols.num <- c("UNITID.y" , "COSTT4_A.y", "UGDS.y", "TUITFTE.y", "NPT_COM", "NUM_COM")
data16[cols.num] <- sapply(data16[cols.num],as.numeric)
sapply(data16, class)
#Create function to impute missing values
impute <- function(x){
na <- is.na(x)
n.missing <- sum(na)
a.obs <- x[!na]
imputed <- x
imputed[na] <- sample(a.obs, n.missing, replace = TRUE)
return(imputed)
}
random.impute.data.frame <- function(data16, cols){
nms <-names(data16)
for(col in cols){
name <- paste(nms[col],"imputed", sep = "")
data16[name] <- impute(data16[,col])
}
data16
}
#Run imputation function
data16 <- random.impute.data.frame(data16, c(1:6))
#Slice out first 6 columns
data16 <- data16[7:12]
#Change ID into row
data16 <- column_to_rownames(data16, "UNITID.yimputed")
data16 <- scale(data16)
#Opitmal number of cluster
fviz_nbclust(data16, kmeans,
method =  "gap_stat")
knitr::opts_chunk$set(error = TRUE)
dat <- merge(MERGED2017_18_PP,MERGED2016_17_PP, by="INSTNM")
dat <- select(dat ,UNITID.x,INSTNM,OPEFLAG.x,UNITID.y, COSTT4_A.y,UGDS.y , NUM4_PUB.y , NUM4_PRIV.y , TUITFTE.y , NPT4_PUB.y , NPT4_PRIV.y )
library(dplyr)
library(cluster, lib.loc = "C:/Program Files/R/R-3.6.1/library")
library(factoextra)
library(tidyr)
library(tidyselect)
library(tidyverse)
dat <- merge(MERGED2017_18_PP,MERGED2016_17_PP, by="INSTNM")
dat <- select(dat ,UNITID.x,INSTNM,OPEFLAG.x,UNITID.y, COSTT4_A.y,UGDS.y , NUM4_PUB.y , NUM4_PRIV.y , TUITFTE.y , NPT4_PUB.y , NPT4_PRIV.y )
install.packages("sparklyr")
rmarkdown::render("your_doc.Rmd")
library(sparklyr)
rmarkdown::render("your_doc.Rmd")
rmarkdown::render("College_Tuition_Analysis.Rmd")
library(cluster, lib.loc = "C:/Program Files/R/R-3.6.1/library")
library(factoextra)
library(dplyr)
library(tidyr)
library(tidyverse)
library(tidyselect)
rmarkdown::render("College_Tuition_Analysis.Rmd")
